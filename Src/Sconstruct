#############################################################################
# Copyright (C) 2007-2011 German Aerospace Center (DLR/SC)
#
# Created: 2010-08-13 Markus Litz <Markus.Litz@dlr.de>
# Changed: $Id: Sconstruct 4398 2011-02-03 15:01:59Z litz_ma $ 
#
# Version: $Revision: 4398 $
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#############################################################################
# scons scipt to build tixi library on unix
import os
import re
from string import join, split

# extract ReturnCode enum and build parameter string for f77 usage
def convertEnum( fFile, hContent, enumName ):

    print " converting enum", enumName
    p = "(enum *" + enumName +  ").*?\{(.*?)\}.*;"
    enumPattern = re.compile( p, re.S)

    doxyEnumCommentPattern = re.compile(  " */\*!<.*?\*/", re.S )
    enums =  doxyEnumCommentPattern.sub( "", enumPattern.search(hContent).groups()[1])
    elist= split( enums.replace('\t','').replace(' ','').replace('\n',''),',')

    for e in elist:
        fFile.writelines( "      integer " + e + "\n")
        
    i = 0
    fFile.writelines("      parameter (\n")
    fFile.writelines( "     $ " + elist[0] + " = " + str(i))
    i=1
    for e in elist[1:]:
        fFile.writelines( ',\n' + "     $ " + e + " = " + str(i) )
        i = i+1
    fFile.writelines( "\n     $ )\n")

def buildTixif(  target = None , source = None, env = None ):


    # os.system( 'cat ' + str(source[0]) +' > ' + str(target[0]) )

    cFileName = str(source[0])
    fFileName =  str(target[0])

    cFile = open( cFileName, 'r' )
    fFile = open( fFileName, 'w' )

    hContent = join(cFile.readlines())

    convertEnum( fFile, hContent, "ReturnCode" )
    convertEnum( fFile, hContent, "StorageMode" )

    fFile.close()
    cFile.close()

    

Import( [ 'env', 'fortranNames' ] )
fortran =  env.Dictionary()['FORTRAN']

env.StaticLibrary(target = 'TIXI', source = Split('tixiImpl.c tixiInternal.c tixiUtils.c uidHelper.c xpathFunctions.c webMethods.c xslTransformation.c'))

if  fortran != "":
  
    envFortran = env.Copy( CPPFLAGS = fortranNames )
    
    #build and install fortran interface
    envFortran.StaticLibrary(target = 'TIXIf', source = 'tixi77.c' )

    #build a tixif.h file to map the C return codes to Fortran parameters
    envFortran.Depends( 'tixif.h' , 'tixi.h' )
    envFortran.AlwaysBuild( 'tixif.h' )
    tixifBuilder = Builder( action = buildTixif  )
    envFortran.Append(  BUILDERS = {'BuildTixif':tixifBuilder} )
    envFortran.BuildTixif( target = 'tixif.h', source = 'tixi.h' )
  
