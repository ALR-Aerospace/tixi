# $Id: Sconstruct 2061 2009-03-30 09:04:13Z bach_ar $
# Main scons script 
import os
import sys
import SCons.Tool.msvs 

def removeQuotes( string):
	return string.replace('"','')

try:
    libxml2Home = os.environ['LIBXML2_HOME']
except:
	try:
		libxml2Home = ARGUMENTS.get('LIBXML2_HOME','')
	except:
		sys.exit('Error: LIBXML2_HOME not defined!')

	
try:
	os.environ["LD_LIBRARY_PATH"] = libxml2Home +  os.sep +"lib:" + os.environ["LD_LIBRARY_PATH"]
except:
	 os.environ["LD_LIBRARY_PATH"] = libxml2Home +  os.sep +"lib" 

try:
    cunitHome = os.environ['CUNIT_HOME']
except:
 	try:
		cunitHome = ARGUMENTS.get('CUNIT_HOME','')
	except:   
		cunitHome = ''

# set up environment
cppFlags = ''
cFlags = ''
fFlags = ''

# parse command line
fortran = ARGUMENTS.get( 'FC', '' )
doUnitTest = ARGUMENTS.get( 'UnitTests', 'no' )
packIt =  ARGUMENTS.get( 'Pack', 'no' )
debug = ARGUMENTS.get('debug','no' )
tool = ARGUMENTS.get('Tool','')
msVSVersion = ARGUMENTS.get('MSVSVersion','7.1')
gccBinDir =  ARGUMENTS.get('GccBinDir','')
runtimeLib = ARGUMENTS.get('RuntimeLib','')
cFlags = removeQuotes(ARGUMENTS.get('CCFLAGS',''))
options = [ 'FC',
            'UnitTests',
            'Pack',
            'debug',
            'Tool',
            'MSVSVersion',
            'GccBinDir',
            'RuntimeLib',
            'CCFLAGS',
            'CUNIT_HOME',
            'LIBXML2_HOME']

# check for unknown options

for arg in ARGUMENTS:
    if arg not in options:
        print "Error: Unknown argument", arg
        sys.exit(1)



execPath = { 'PATH' : os.environ['PATH']}


if os.environ.has_key( 'CCFLAGS' ) and cFlags=='':	
    cFlags = os.environ['CCFLAGS']

if os.environ.has_key( 'FCFLAGS' ):	
    fFlags = os.environ['FCFLAGS']

if tool == 'mingw':
    cppFlags = '-DLIBXML_STATIC '
    cFlags = cFlags + ' -m486 '

includePath =[ libxml2Home + os.sep + 'include', '#' + os.sep + 'Src'  ]
libraryPath = [ libxml2Home + r'/lib', r'#/Src' ]
libraries = ['TIXI','libxml2']

if  fortran != "":

    try:
        platform =  os.uname()[0]
    except:
        platform = 'win32'
    # specify which kind of names to be generated
    
    if fortran == 'g77' and platform == 'Linux':
        fortranNames = '-DG77_LINUX'
    elif fortran == 'f90' and platform == 'HP-UX':
        fortranNames = '-DF90_HPUX'
    elif fortran == 'f77' and platform == 'IRIX':
        fortranNames = '-DF90_IRIX'
    elif fortran == 'g77' and platform == 'IRIX':
        fortranNames = '-DG77_IRIX'
    elif fortran == 'g77' and platform == 'win32':
        fortranNames = '-DG77_MINGW'
    elif fortran == 'f90' and platform == 'IRIX':
        fortranNames = '-DF90_IRIX'
    elif ( fortran in ('ifort' ,'df')) and platform == 'win32':
        fortranNames = ' /D IFORT_WIN32'
    else:
	print '---------------------------------------------------------------------'
        sys.exit( 'Error: Unknow fortran compiler ', fortran, ' or platform ', platform)

else:
	fortranNames ='-DNO_FORTRAN'

if tool == 'msvc':
    #check for versions installed
    msvsVersions = SCons.Tool.msvs.get_visualstudio_versions()
    if not ( msVSVersion in msvsVersions ):
        print ''
        print "MS Visual Studio Version ", msVSVersion, ' not available choose one of'
        print
        for version in msvsVersions:
            print version

        print
        sys.exit(1)
    
if debug == 'yes':       
    env = Environment( 
        FORTRAN = fortran,
        ENV = execPath,
        CPPPATH = includePath, 
        LIBS = libraries, 
        LIBPATH = libraryPath,
        CCFLAGS='-g3',
        FORTRANFLAGS='-g3' )
else:
    env = Environment(
        FORTRAN = fortran,
        ENV = execPath,
        CPPPATH = includePath,
        CPPFLAGS = cppFlags,
        CCFLAGS = cFlags,
        MSVS_VERSION = msVSVersion,
        FORTRANFLAGS = fFlags,
        LIBS = libraries,
        LIBPATH = libraryPath )
   
# modify tool set

if tool:
    Tool(tool)(env)

if msVSVersion:
	env.AppendUnique(CCFLAGS = cFlags )

if gccBinDir != '':
    
    env.Dictionary()['FORTRAN'] = gccBinDir + '/' + fortran
    env.Dictionary()['CC'] = gccBinDir + '/' + 'gcc'
    env.Dictionary()['AS'] = gccBinDir + '/' + 'as'
    env.Dictionary()['CCFLAGS'] = cFlags
    
    
Export('env', 'libxml2Home', 'fortranNames', 'runtimeLib' )
SConscript( 'Src/Sconstruct' )

if packIt == 'yes':
    SConscript( 'SconscriptDist' )


if doUnitTest == 'yes':
    if cunitHome != "":
        env.Append( CPPPATH =  cunitHome + os.sep + 'include' )
        env.Append( LIBPATH =  cunitHome + os.sep + 'lib' )
        SConscript( 'CUnitTests/Sconstruct' )
    else:
        sys.exit( "Error: CUNIT_HOME not set!")



